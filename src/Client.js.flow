// @flow strict

export interface ClientConfig {
  secret: string;
  domain?: string;
  scheme?: 'http' | 'https';
  port?: number;
  timeout?: number;
  observer?: (res: RequestResult, client: Client) => void;
  keepAlive?: boolean;
  headers?: {
    [key: string]: string | number,
    ...
  };
  fetch?: typeof fetch;
}
export interface QueryOptions {
  secret?: string;
}
declare export default class Client {
  constructor(opts?: ClientConfig): this;
  query<T>(expr: Expr, options?: QueryOptions): Promise<T>;
  paginate(expr: Expr, params?: {| [key: string]: any |}, options?: QueryOptions): PageHelper;
  ping(scope?: string, timeout?: number): Promise<string>;
}
